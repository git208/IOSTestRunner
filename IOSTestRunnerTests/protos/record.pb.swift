// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: record.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct StockTesting_TestExecutionRecord {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var jobID: String = String()

  var runnerID: String = String()

  var testcaseID: String = String()

  var recordID: String = String()

  var isPass: Bool = false

  var startTime: Int64 = 0

  var endTime: Int64 = 0

  var paramData: Data = SwiftProtobuf.Internal.emptyData

  var resultData: Data = SwiftProtobuf.Internal.emptyData

  var exceptionData: Data = SwiftProtobuf.Internal.emptyData

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct StockTesting_RunnerExecutionRecord {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var jobID: String = String()

  var runnerID: String = String()

  var runCount: Int32 = 0

  var failureCount: Int32 = 0

  var runTime: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "stock_testing"

extension StockTesting_TestExecutionRecord: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TestExecutionRecord"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "jobID"),
    2: .same(proto: "runnerID"),
    3: .same(proto: "testcaseID"),
    4: .same(proto: "recordID"),
    5: .same(proto: "isPass"),
    6: .same(proto: "startTime"),
    7: .same(proto: "endTime"),
    8: .same(proto: "paramData"),
    9: .same(proto: "resultData"),
    10: .same(proto: "exceptionData"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.jobID)
      case 2: try decoder.decodeSingularStringField(value: &self.runnerID)
      case 3: try decoder.decodeSingularStringField(value: &self.testcaseID)
      case 4: try decoder.decodeSingularStringField(value: &self.recordID)
      case 5: try decoder.decodeSingularBoolField(value: &self.isPass)
      case 6: try decoder.decodeSingularInt64Field(value: &self.startTime)
      case 7: try decoder.decodeSingularInt64Field(value: &self.endTime)
      case 8: try decoder.decodeSingularBytesField(value: &self.paramData)
      case 9: try decoder.decodeSingularBytesField(value: &self.resultData)
      case 10: try decoder.decodeSingularBytesField(value: &self.exceptionData)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.jobID.isEmpty {
      try visitor.visitSingularStringField(value: self.jobID, fieldNumber: 1)
    }
    if !self.runnerID.isEmpty {
      try visitor.visitSingularStringField(value: self.runnerID, fieldNumber: 2)
    }
    if !self.testcaseID.isEmpty {
      try visitor.visitSingularStringField(value: self.testcaseID, fieldNumber: 3)
    }
    if !self.recordID.isEmpty {
      try visitor.visitSingularStringField(value: self.recordID, fieldNumber: 4)
    }
    if self.isPass != false {
      try visitor.visitSingularBoolField(value: self.isPass, fieldNumber: 5)
    }
    if self.startTime != 0 {
      try visitor.visitSingularInt64Field(value: self.startTime, fieldNumber: 6)
    }
    if self.endTime != 0 {
      try visitor.visitSingularInt64Field(value: self.endTime, fieldNumber: 7)
    }
    if !self.paramData.isEmpty {
      try visitor.visitSingularBytesField(value: self.paramData, fieldNumber: 8)
    }
    if !self.resultData.isEmpty {
      try visitor.visitSingularBytesField(value: self.resultData, fieldNumber: 9)
    }
    if !self.exceptionData.isEmpty {
      try visitor.visitSingularBytesField(value: self.exceptionData, fieldNumber: 10)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: StockTesting_TestExecutionRecord, rhs: StockTesting_TestExecutionRecord) -> Bool {
    if lhs.jobID != rhs.jobID {return false}
    if lhs.runnerID != rhs.runnerID {return false}
    if lhs.testcaseID != rhs.testcaseID {return false}
    if lhs.recordID != rhs.recordID {return false}
    if lhs.isPass != rhs.isPass {return false}
    if lhs.startTime != rhs.startTime {return false}
    if lhs.endTime != rhs.endTime {return false}
    if lhs.paramData != rhs.paramData {return false}
    if lhs.resultData != rhs.resultData {return false}
    if lhs.exceptionData != rhs.exceptionData {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension StockTesting_RunnerExecutionRecord: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".RunnerExecutionRecord"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "jobID"),
    2: .same(proto: "runnerID"),
    3: .same(proto: "runCount"),
    4: .same(proto: "failureCount"),
    5: .same(proto: "runTime"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.jobID)
      case 2: try decoder.decodeSingularStringField(value: &self.runnerID)
      case 3: try decoder.decodeSingularInt32Field(value: &self.runCount)
      case 4: try decoder.decodeSingularInt32Field(value: &self.failureCount)
      case 5: try decoder.decodeSingularInt64Field(value: &self.runTime)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.jobID.isEmpty {
      try visitor.visitSingularStringField(value: self.jobID, fieldNumber: 1)
    }
    if !self.runnerID.isEmpty {
      try visitor.visitSingularStringField(value: self.runnerID, fieldNumber: 2)
    }
    if self.runCount != 0 {
      try visitor.visitSingularInt32Field(value: self.runCount, fieldNumber: 3)
    }
    if self.failureCount != 0 {
      try visitor.visitSingularInt32Field(value: self.failureCount, fieldNumber: 4)
    }
    if self.runTime != 0 {
      try visitor.visitSingularInt64Field(value: self.runTime, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: StockTesting_RunnerExecutionRecord, rhs: StockTesting_RunnerExecutionRecord) -> Bool {
    if lhs.jobID != rhs.jobID {return false}
    if lhs.runnerID != rhs.runnerID {return false}
    if lhs.runCount != rhs.runCount {return false}
    if lhs.failureCount != rhs.failureCount {return false}
    if lhs.runTime != rhs.runTime {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
